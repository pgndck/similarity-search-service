# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import similarity_pb2 as similarity__pb2


class SimilaritySearchServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddItem = channel.unary_unary(
            '/similarity.SimilaritySearchService/AddItem',
            request_serializer=similarity__pb2.AddItemRequest.SerializeToString,
            response_deserializer=similarity__pb2.AddItemResponse.FromString,
        )
        self.SearchItems = channel.unary_unary(
            '/similarity.SimilaritySearchService/SearchItems',
            request_serializer=similarity__pb2.SearchItemsRequest.SerializeToString,
            response_deserializer=similarity__pb2.SearchItemsResponse.FromString,
        )
        self.GetSearchResults = channel.unary_unary(
            '/similarity.SimilaritySearchService/GetSearchResults',
            request_serializer=similarity__pb2.GetSearchResultsRequest.SerializeToString,
            response_deserializer=similarity__pb2.GetSearchResultsResponse.FromString,
        )


class SimilaritySearchServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchItems(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSearchResults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SimilaritySearchServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'AddItem': grpc.unary_unary_rpc_method_handler(
            servicer.AddItem,
            request_deserializer=similarity__pb2.AddItemRequest.FromString,
            response_serializer=similarity__pb2.AddItemResponse.SerializeToString,
        ),
        'SearchItems': grpc.unary_unary_rpc_method_handler(
            servicer.SearchItems,
            request_deserializer=similarity__pb2.SearchItemsRequest.FromString,
            response_serializer=similarity__pb2.SearchItemsResponse.SerializeToString,
        ),
        'GetSearchResults': grpc.unary_unary_rpc_method_handler(
            servicer.GetSearchResults,
            request_deserializer=similarity__pb2.GetSearchResultsRequest.FromString,
            response_serializer=similarity__pb2.GetSearchResultsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'similarity.SimilaritySearchService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class SimilaritySearchService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddItem(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
        return grpc.experimental.unary_unary(request, target, '/similarity.SimilaritySearchService/AddItem',
                                             similarity__pb2.AddItemRequest.SerializeToString,
                                             similarity__pb2.AddItemResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchItems(request,
                    target,
                    options=(),
                    channel_credentials=None,
                    call_credentials=None,
                    insecure=False,
                    compression=None,
                    wait_for_ready=None,
                    timeout=None,
                    metadata=None):
        return grpc.experimental.unary_unary(request, target, '/similarity.SimilaritySearchService/SearchItems',
                                             similarity__pb2.SearchItemsRequest.SerializeToString,
                                             similarity__pb2.SearchItemsResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSearchResults(request,
                         target,
                         options=(),
                         channel_credentials=None,
                         call_credentials=None,
                         insecure=False,
                         compression=None,
                         wait_for_ready=None,
                         timeout=None,
                         metadata=None):
        return grpc.experimental.unary_unary(request, target, '/similarity.SimilaritySearchService/GetSearchResults',
                                             similarity__pb2.GetSearchResultsRequest.SerializeToString,
                                             similarity__pb2.GetSearchResultsResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
